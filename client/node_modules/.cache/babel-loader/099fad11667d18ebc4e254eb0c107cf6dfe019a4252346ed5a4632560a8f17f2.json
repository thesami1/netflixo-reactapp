{"ast":null,"code":"import * as CategoriesConstants from \"../Constants/CategoriesConstants\";\nimport * as categoriesAPIs from \"../APIs/CategoriesServices\";\nimport toast from \"react-hot-toast\";\nimport { ErrorsAction, tokenProtection } from \"../Protection\";\n\n// Get all Categories action\nexport const getAllCategoriesAction = () => async dispatch => {\n  try {\n    dispatch({\n      type: CategoriesConstants.GET_ALL_CATEGORIES_REQUEST\n    });\n    const data = await categoriesAPIs.getCategoriesService();\n    dispatch({\n      type: CategoriesConstants.GET_ALL_CATEGORIES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    ErrorsAction(error, dispatch, CategoriesConstants.GET_ALL_CATEGORIES_FAIL);\n  }\n};\n\n// Create Category action\nexport const createCategoryAction = title => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CategoriesConstants.CREATE_CATEGORY_REQUEST\n    });\n    await categoriesAPIs.createCategoryService(title, tokenProtection(getState));\n    dispatch({\n      type: CategoriesConstants.CREATE_CATEGORY_SUCCESS\n    });\n    toast.success(\"Category created successfully\");\n    dispatch(getAllCategoriesAction());\n  } catch (error) {\n    ErrorsAction(error, dispatch, CategoriesConstants.CREATE_CATEGORY_FAIL);\n  }\n};\n\n// Update Category action\nexport const updateCategoryAction = (id, title) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CategoriesConstants.UPDATE_CATEGORY_REQUEST\n    });\n    await categoriesAPIs.updateCategoryService(id, title, tokenProtection(getState));\n    dispatch({\n      type: CategoriesConstants.UPDATE_CATEGORY_SUCCESS\n    });\n    toast.success(\"Category updated successfully\");\n    dispatch(getAllCategoriesAction());\n  } catch (error) {\n    ErrorsAction(error, dispatch, CategoriesConstants.UPDATE_CATEGORY_FAIL);\n  }\n};\n\n// Delete Category action\nexport const deleteCategoryAction = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CategoriesConstants.DELETE_CATEGORY_REQUEST\n    });\n    await categoriesAPIs.deleteCategoryService(id, tokenProtection(getState));\n    dispatch({\n      type: CategoriesConstants.DELETE_CATEGORY_SUCCESS\n    });\n    toast.success(\"Category deleted successfully\");\n    dispatch(getAllCategoriesAction());\n  } catch (error) {\n    ErrorsAction(error, dispatch, CategoriesConstants.DELETE_CATEGORY_FAIL);\n  }\n};","map":{"version":3,"names":["CategoriesConstants","categoriesAPIs","toast","ErrorsAction","tokenProtection","getAllCategoriesAction","dispatch","type","GET_ALL_CATEGORIES_REQUEST","data","getCategoriesService","GET_ALL_CATEGORIES_SUCCESS","payload","error","GET_ALL_CATEGORIES_FAIL","createCategoryAction","title","getState","CREATE_CATEGORY_REQUEST","createCategoryService","CREATE_CATEGORY_SUCCESS","success","CREATE_CATEGORY_FAIL","updateCategoryAction","id","UPDATE_CATEGORY_REQUEST","updateCategoryService","UPDATE_CATEGORY_SUCCESS","UPDATE_CATEGORY_FAIL","deleteCategoryAction","DELETE_CATEGORY_REQUEST","deleteCategoryService","DELETE_CATEGORY_SUCCESS","DELETE_CATEGORY_FAIL"],"sources":["C:/Users/hp/Downloads/practice/client/src/Redux/Actions/CategoriesActions.js"],"sourcesContent":["import * as CategoriesConstants from \"../Constants/CategoriesConstants\";\nimport * as categoriesAPIs from \"../APIs/CategoriesServices\";\nimport toast from \"react-hot-toast\";\nimport { ErrorsAction, tokenProtection } from \"../Protection\";\n\n// Get all Categories action\nexport const getAllCategoriesAction = () => async (dispatch) => {\n  try {\n    dispatch({ type: CategoriesConstants.GET_ALL_CATEGORIES_REQUEST });\n    const data = await categoriesAPIs.getCategoriesService();\n    dispatch({\n      type: CategoriesConstants.GET_ALL_CATEGORIES_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    ErrorsAction(error, dispatch, CategoriesConstants.GET_ALL_CATEGORIES_FAIL);\n  }\n};\n\n// Create Category action\nexport const createCategoryAction = (title) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: CategoriesConstants.CREATE_CATEGORY_REQUEST });\n    await categoriesAPIs.createCategoryService(title, tokenProtection(getState));\n    dispatch({ \n      type: CategoriesConstants.CREATE_CATEGORY_SUCCESS \n    });\n    toast.success(\"Category created successfully\");\n    dispatch(getAllCategoriesAction());\n  } catch (error) {\n    ErrorsAction(error, dispatch, CategoriesConstants.CREATE_CATEGORY_FAIL);\n  }\n};\n\n// Update Category action\nexport const updateCategoryAction =\n  (id, title) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: CategoriesConstants.UPDATE_CATEGORY_REQUEST });\n      await categoriesAPIs.updateCategoryService(\n        id,\n        title,\n        tokenProtection(getState)\n      );\n      dispatch({ type: CategoriesConstants.UPDATE_CATEGORY_SUCCESS });\n      toast.success(\"Category updated successfully\");\n      dispatch(getAllCategoriesAction());\n    } catch (error) {\n      ErrorsAction(error, dispatch, CategoriesConstants.UPDATE_CATEGORY_FAIL);\n    }\n  };\n\n// Delete Category action\nexport const deleteCategoryAction = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: CategoriesConstants.DELETE_CATEGORY_REQUEST });\n    await categoriesAPIs.deleteCategoryService(id, tokenProtection(getState));\n    dispatch({ type: CategoriesConstants.DELETE_CATEGORY_SUCCESS });\n    toast.success(\"Category deleted successfully\");\n    dispatch(getAllCategoriesAction());\n  } catch (error) {\n    ErrorsAction(error, dispatch, CategoriesConstants.DELETE_CATEGORY_FAIL);\n  }\n};\n"],"mappings":"AAAA,OAAO,KAAKA,mBAAmB,MAAM,kCAAkC;AACvE,OAAO,KAAKC,cAAc,MAAM,4BAA4B;AAC5D,OAAOC,KAAK,MAAM,iBAAiB;AACnC,SAASC,YAAY,EAAEC,eAAe,QAAQ,eAAe;;AAE7D;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAC9D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEP,mBAAmB,CAACQ;IAA2B,CAAC,CAAC;IAClE,MAAMC,IAAI,GAAG,MAAMR,cAAc,CAACS,oBAAoB,EAAE;IACxDJ,QAAQ,CAAC;MACPC,IAAI,EAAEP,mBAAmB,CAACW,0BAA0B;MACpDC,OAAO,EAAEH;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdV,YAAY,CAACU,KAAK,EAAEP,QAAQ,EAAEN,mBAAmB,CAACc,uBAAuB,CAAC;EAC5E;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAIC,KAAK,IAAK,OAAOV,QAAQ,EAAEW,QAAQ,KAAK;EAC3E,IAAI;IACFX,QAAQ,CAAC;MAAEC,IAAI,EAAEP,mBAAmB,CAACkB;IAAwB,CAAC,CAAC;IAC/D,MAAMjB,cAAc,CAACkB,qBAAqB,CAACH,KAAK,EAAEZ,eAAe,CAACa,QAAQ,CAAC,CAAC;IAC5EX,QAAQ,CAAC;MACPC,IAAI,EAAEP,mBAAmB,CAACoB;IAC5B,CAAC,CAAC;IACFlB,KAAK,CAACmB,OAAO,CAAC,+BAA+B,CAAC;IAC9Cf,QAAQ,CAACD,sBAAsB,EAAE,CAAC;EACpC,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdV,YAAY,CAACU,KAAK,EAAEP,QAAQ,EAAEN,mBAAmB,CAACsB,oBAAoB,CAAC;EACzE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAC/BA,CAACC,EAAE,EAAER,KAAK,KAAK,OAAOV,QAAQ,EAAEW,QAAQ,KAAK;EAC3C,IAAI;IACFX,QAAQ,CAAC;MAAEC,IAAI,EAAEP,mBAAmB,CAACyB;IAAwB,CAAC,CAAC;IAC/D,MAAMxB,cAAc,CAACyB,qBAAqB,CACxCF,EAAE,EACFR,KAAK,EACLZ,eAAe,CAACa,QAAQ,CAAC,CAC1B;IACDX,QAAQ,CAAC;MAAEC,IAAI,EAAEP,mBAAmB,CAAC2B;IAAwB,CAAC,CAAC;IAC/DzB,KAAK,CAACmB,OAAO,CAAC,+BAA+B,CAAC;IAC9Cf,QAAQ,CAACD,sBAAsB,EAAE,CAAC;EACpC,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdV,YAAY,CAACU,KAAK,EAAEP,QAAQ,EAAEN,mBAAmB,CAAC4B,oBAAoB,CAAC;EACzE;AACF,CAAC;;AAEH;AACA,OAAO,MAAMC,oBAAoB,GAAIL,EAAE,IAAK,OAAOlB,QAAQ,EAAEW,QAAQ,KAAK;EACxE,IAAI;IACFX,QAAQ,CAAC;MAAEC,IAAI,EAAEP,mBAAmB,CAAC8B;IAAwB,CAAC,CAAC;IAC/D,MAAM7B,cAAc,CAAC8B,qBAAqB,CAACP,EAAE,EAAEpB,eAAe,CAACa,QAAQ,CAAC,CAAC;IACzEX,QAAQ,CAAC;MAAEC,IAAI,EAAEP,mBAAmB,CAACgC;IAAwB,CAAC,CAAC;IAC/D9B,KAAK,CAACmB,OAAO,CAAC,+BAA+B,CAAC;IAC9Cf,QAAQ,CAACD,sBAAsB,EAAE,CAAC;EACpC,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdV,YAAY,CAACU,KAAK,EAAEP,QAAQ,EAAEN,mBAAmB,CAACiC,oBAAoB,CAAC;EACzE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}