{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\practice\\\\client\\\\src\\\\Components\\\\Modals\\\\CastsModal.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import MainModal from \"./MainModal\";\n// import { Input } from \"../UsedInputs\";\n// import Uploder from \"../Uploder\";\n\n// function CastsModal({ modalOpen, setModalOpen, cast }) {\n//   return (\n//     <MainModal modalOpen={modalOpen} setModalOpen={setModalOpen}>\n//       <div className=\"inline-block sm:w-4/5 border border-border md:w-3/5 lg:w-2/5 w-full align-middle p-10 overflow-y-auto h-full bg-main text-white rounded-2xl\">\n//         <h2 className=\"text-3xl font-bold\">\n//           {cast ? \"Update Cast\" : \"Create Cast\"}\n//         </h2>\n//         <form className=\"flex flex-col gap-6 text-left mt-6\">\n//           <Input\n//             label=\"Cast Name\"\n//             placeholder={cast ? cast.fullName : \"John Doe\"}\n//             type=\"text\"\n//             bg={false}\n//           />\n//           <div className=\"flex flex-col gap-2\">\n//             <p className=\"text-border font-semibold text-sm\">Cast Image</p>\n//             <Uploder />\n//             <div className=\"w-32 h-32 p-2 bg-main border border-border rounded\">\n//               <img\n//                 src={`/images/${cast ? cast.image : \"user.png\"}`}\n//                 alt={cast?.fullName}\n//                 className=\"w-full h-full object-cover rounded\"\n//               />\n//             </div>\n//           </div>\n//           <button\n//             onClick={() => setModalOpen(false)}\n//             className=\"w-full flex-rows gap-4 py-3 text-lg transitions hover:bg-dry border-2 border-subMain rounded bg-subMain text-white\"\n//           >\n//             {cast ? \"Update\" : \"Add\"}\n//           </button>\n//         </form>\n//       </div>\n//     </MainModal>\n//   );\n// }\n\n// export default CastsModal;\n\nimport React, { useEffect, useState } from \"react\";\nimport MainModal from \"./MainModal\";\nimport { Input } from \"../UsedInputs\";\nimport Uploder from \"../Uploder\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport toast from \"react-hot-toast\";\nimport { addCastAction, updateCastAction } from \"../../Redux/Actions/MoviesActions\";\nimport { InlineError } from \"../Notfications/Error\";\nimport { Imagepreview } from \"../Imagepreview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CastsModal(_ref) {\n  _s();\n  let {\n    modalOpen,\n    setModalOpen,\n    cast\n  } = _ref;\n  const dispatch = useDispatch();\n  const [castImage, setCastImage] = useState(\"\");\n  const generateId = Math.floor(Math.random() * 100000000);\n  const image = castImage ? castImage : cast === null || cast === void 0 ? void 0 : cast.image;\n\n  // validate cast\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(yup.object().shape({\n      name: yup.string().required(\"Cast Name is required\")\n    }))\n  });\n\n  // on submit\n  const onSubmit = data => {\n    if (cast) {\n      // if cast is not null then update cast\n      dispatch(updateCastAction({\n        ...data,\n        image: image,\n        id: cast.id\n      }));\n      toast.success(\"Cast updated successfully\");\n    } else {\n      // else create cast\n      dispatch(addCastAction({\n        ...data,\n        image: image,\n        id: generateId\n      }));\n      toast.success(\"Cast created successfully\");\n    }\n    reset();\n    setCastImage(\"\");\n    setModalOpen(false);\n  };\n  useEffect(() => {\n    if (cast) {\n      setValue(\"name\", cast === null || cast === void 0 ? void 0 : cast.name);\n    }\n  }, [cast, setValue]);\n  return /*#__PURE__*/_jsxDEV(MainModal, {\n    modalOpen: modalOpen,\n    setModalOpen: setModalOpen,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inline-block sm:w-4/5 border border-border md:w-3/5 lg:w-2/5 w-full align-middle p-10 overflow-y-auto h-full bg-main text-white rounded-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold\",\n        children: cast ? \"Update Cast\" : \"Create Cast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        className: \"flex flex-col gap-6 text-left mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            label: \"Cast name\",\n            placeholder: \"John Doe\",\n            type: \"text\",\n            name: \"name\",\n            register: register(\"name\"),\n            bg: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), errors.name && /*#__PURE__*/_jsxDEV(InlineError, {\n            text: errors.name.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-border font-semibold text-sm\",\n            children: \"Cast Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Uploder, {\n            setImageUrl: setCastImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Imagepreview, {\n            image: image ? image : \"/images/user.png\",\n            name: \"castImage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => setModalOpen(false),\n          className: \"w-full flex-rows gap-4 py-3 text-lg transitions hover:bg-dry border-2 border-subMain rounded bg-subMain text-white\",\n          children: cast ? \"Update\" : \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(CastsModal, \"LlsJ+MfY+57+5f2nZC9/yuv06OQ=\", false, function () {\n  return [useDispatch, useForm];\n});\n_c = CastsModal;\nexport default CastsModal;\nvar _c;\n$RefreshReg$(_c, \"CastsModal\");","map":{"version":3,"names":["React","useEffect","useState","MainModal","Input","Uploder","useDispatch","useForm","yupResolver","yup","toast","addCastAction","updateCastAction","InlineError","Imagepreview","jsxDEV","_jsxDEV","CastsModal","_ref","_s","modalOpen","setModalOpen","cast","dispatch","castImage","setCastImage","generateId","Math","floor","random","image","register","handleSubmit","reset","setValue","formState","errors","resolver","object","shape","name","string","required","onSubmit","data","id","success","children","className","fileName","_jsxFileName","lineNumber","columnNumber","label","placeholder","type","bg","text","message","setImageUrl","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hp/Downloads/practice/client/src/Components/Modals/CastsModal.js"],"sourcesContent":["// import React from \"react\";\n// import MainModal from \"./MainModal\";\n// import { Input } from \"../UsedInputs\";\n// import Uploder from \"../Uploder\";\n\n// function CastsModal({ modalOpen, setModalOpen, cast }) {\n//   return (\n//     <MainModal modalOpen={modalOpen} setModalOpen={setModalOpen}>\n//       <div className=\"inline-block sm:w-4/5 border border-border md:w-3/5 lg:w-2/5 w-full align-middle p-10 overflow-y-auto h-full bg-main text-white rounded-2xl\">\n//         <h2 className=\"text-3xl font-bold\">\n//           {cast ? \"Update Cast\" : \"Create Cast\"}\n//         </h2>\n//         <form className=\"flex flex-col gap-6 text-left mt-6\">\n//           <Input\n//             label=\"Cast Name\"\n//             placeholder={cast ? cast.fullName : \"John Doe\"}\n//             type=\"text\"\n//             bg={false}\n//           />\n//           <div className=\"flex flex-col gap-2\">\n//             <p className=\"text-border font-semibold text-sm\">Cast Image</p>\n//             <Uploder />\n//             <div className=\"w-32 h-32 p-2 bg-main border border-border rounded\">\n//               <img\n//                 src={`/images/${cast ? cast.image : \"user.png\"}`}\n//                 alt={cast?.fullName}\n//                 className=\"w-full h-full object-cover rounded\"\n//               />\n//             </div>\n//           </div>\n//           <button\n//             onClick={() => setModalOpen(false)}\n//             className=\"w-full flex-rows gap-4 py-3 text-lg transitions hover:bg-dry border-2 border-subMain rounded bg-subMain text-white\"\n//           >\n//             {cast ? \"Update\" : \"Add\"}\n//           </button>\n//         </form>\n//       </div>\n//     </MainModal>\n//   );\n// }\n\n// export default CastsModal;\n\n\nimport React, { useEffect, useState } from \"react\";\nimport MainModal from \"./MainModal\";\nimport { Input } from \"../UsedInputs\";\nimport Uploder from \"../Uploder\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport toast from \"react-hot-toast\";\nimport {\n  addCastAction,\n  updateCastAction,\n} from \"../../Redux/Actions/MoviesActions\";\nimport { InlineError } from \"../Notfications/Error\";\nimport { Imagepreview } from \"../Imagepreview\";\n\nfunction CastsModal({ modalOpen, setModalOpen, cast }) {\n  const dispatch = useDispatch();\n  const [castImage, setCastImage] = useState(\"\");\n  const generateId = Math.floor(Math.random() * 100000000);\n  const image = castImage ? castImage : cast?.image;\n\n  // validate cast\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(\n      yup.object().shape({\n        name: yup.string().required(\"Cast Name is required\"),\n      })\n    ),\n  });\n\n  // on submit\n  const onSubmit = (data) => {\n    if (cast) {\n      // if cast is not null then update cast\n      dispatch(\n        updateCastAction({\n          ...data,\n          image: image,\n          id: cast.id,\n        })\n      );\n      toast.success(\"Cast updated successfully\");\n    } else {\n      // else create cast\n      dispatch(\n        addCastAction({\n          ...data,\n          image: image,\n          id: generateId,\n        })\n      );\n      toast.success(\"Cast created successfully\");\n    }\n    reset();\n    setCastImage(\"\");\n    setModalOpen(false);\n  };\n\n  useEffect(() => {\n    if (cast) {\n      setValue(\"name\", cast?.name);\n    }\n  }, [cast, setValue]);\n\n  return (\n    <MainModal modalOpen={modalOpen} setModalOpen={setModalOpen}>\n      <div className=\"inline-block sm:w-4/5 border border-border md:w-3/5 lg:w-2/5 w-full align-middle p-10 overflow-y-auto h-full bg-main text-white rounded-2xl\">\n        <h2 className=\"text-3xl font-bold\">\n          {cast ? \"Update Cast\" : \"Create Cast\"}\n        </h2>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"flex flex-col gap-6 text-left mt-6\"\n        >\n          <div className=\"w-full\">\n            <Input\n              label=\"Cast name\"\n              placeholder=\"John Doe\"\n              type=\"text\"\n              name=\"name\"\n              register={register(\"name\")}\n              bg={true}\n            />\n            {errors.name && <InlineError text={errors.name.message} />}\n          </div>\n          <div className=\"flex flex-col gap-2\">\n            <p className=\"text-border font-semibold text-sm\">Cast Image</p>\n            <Uploder setImageUrl={setCastImage} />\n            <Imagepreview\n              image={image ? image : \"/images/user.png\"}\n              name=\"castImage\"\n            />\n          </div>\n          <button\n            type=\"submit\"\n            onClick={() => setModalOpen(false)}\n            className=\"w-full flex-rows gap-4 py-3 text-lg transitions hover:bg-dry border-2 border-subMain rounded bg-subMain text-white\"\n          >\n            {cast ? \"Update\" : \"Add\"}\n          </button>\n        </form>\n      </div>\n    </MainModal>\n  );\n}\n\nexport default CastsModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}